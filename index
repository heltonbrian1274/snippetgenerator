// File: .env.local
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

// File: next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  experimental: {
    serverActions: true,
  },
};

module.exports = nextConfig;

// File: tailwind.config.ts
import type { Config } from 'tailwindcss';

const config: Config = {
  content: ['./app/**/*.{js,ts,jsx,tsx}', './pages/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

export default config;

// File: app/page.tsx
'use client';

import { useState } from 'react';

export default function Home() {
  const [inputType, setInputType] = useState<'blog' | 'video'>('blog');
  const [blogText, setBlogText] = useState('');
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const [tone, setTone] = useState('professional');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);

  const handleSubmit = async () => {
    setLoading(true);
    const formData = new FormData();
    formData.append('tone', tone);

    if (inputType === 'blog') {
      formData.append('blog', blogText);
    } else if (videoFile) {
      formData.append('video', videoFile);
    }

    const res = await fetch('/api/generate', {
      method: 'POST',
      body: formData,
    });
    const data = await res.json();
    setResult(data);
    setLoading(false);
  };

  return (
    <main className="min-h-screen p-6 bg-gray-100">
      <div className="max-w-2xl mx-auto bg-white rounded-xl p-6 shadow-md">
        <h1 className="text-2xl font-bold mb-4">Content Repurposer</h1>

        <select
          value={inputType}
          onChange={(e) => setInputType(e.target.value as 'blog' | 'video')}
          className="mb-4 border p-2 rounded w-full"
        >
          <option value="blog">Blog Post</option>
          <option value="video">Video File</option>
        </select>

        {inputType === 'blog' ? (
          <textarea
            className="w-full h-40 p-2 border rounded mb-4"
            placeholder="Paste your blog post here..."
            value={blogText}
            onChange={(e) => setBlogText(e.target.value)}
          />
        ) : (
          <input
            type="file"
            accept="video/*"
            onChange={(e) => setVideoFile(e.target.files?.[0] || null)}
            className="mb-4"
          />
        )}

        <select
          value={tone}
          onChange={(e) => setTone(e.target.value)}
          className="mb-4 border p-2 rounded w-full"
        >
          <option value="professional">Professional</option>
          <option value="casual">Casual</option>
          <option value="funny">Funny</option>
        </select>

        <button
          onClick={handleSubmit}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          disabled={loading}
        >
          {loading ? 'Processing...' : 'Generate Snippets'}
        </button>

        {result && (
          <div className="mt-6 space-y-4">
            <div>
              <h2 className="font-semibold">Tweet:</h2>
              <p>{result.tweet}</p>
            </div>
            <div>
              <h2 className="font-semibold">Instagram Caption:</h2>
              <p>{result.instagram}</p>
            </div>
            <div>
              <h2 className="font-semibold">TikTok Script:</h2>
              <p>{result.tiktok}</p>
            </div>
          </div>
        )}
      </div>
    </main>
  );
}

// File: app/api/generate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { Configuration, OpenAIApi } from 'openai';
import * as fs from 'fs/promises';

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export async function POST(req: NextRequest) {
  const formData = await req.formData();
  const tone = formData.get('tone')?.toString() || 'professional';
  const blog = formData.get('blog');
  const video = formData.get('video') as File | null;

  let baseText = '';
  if (blog) {
    baseText = blog.toString();
  } else if (video) {
    const buffer = Buffer.from(await video.arrayBuffer());
    const response = await fetch('https://api-inference.huggingface.co/models/openai/whisper-large', {
      method: 'POST',
      headers: {
        Authorization: `Bearer hf_your_huggingface_key`,
        'Content-Type': 'audio/mpeg',
      },
      body: buffer,
    });
    const json = await response.json();
    baseText = json.text || '';
  }

  const prompt = `Summarize this content in a ${tone} tone and create:
- A 280-character tweet
- An Instagram caption
- A 60-second TikTok script

Content:
"""
${baseText}
"""`;

  const aiResponse = await openai.createChatCompletion({
    model: 'gpt-4o',
    messages: [{ role: 'user', content: prompt }],
  });

  const completion = aiResponse.data.choices[0].message?.content || '';
  const [tweet, instagram, tiktok] = completion.split(/Instagram caption:|TikTok script:/).map(x => x.trim());

  return NextResponse.json({ tweet, instagram, tiktok });
}

// File: README.md
# Content Repurposer

This tool lets you upload a blog or video and generates content snippets:
- Tweet (280 chars)
- Instagram caption
- TikTok script (60s)

## Setup

1. Clone the repo
2. Create a `.env.local` file:
```
OPENAI_API_KEY=your_openai_key
```
3. Run locally:
```bash
npm install
npm run dev
```

## Deploy
- Push to GitHub
- Connect to Vercel
- Add `OPENAI_API_KEY` in Vercel environment settings
